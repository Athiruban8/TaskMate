generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(uuid())
  email           String           @unique
  name            String?
  githubUrl       String?
  city            String?   
  skills          String[]         
  createdAt       DateTime         @default(now())
  
  ownedProjects   Project[]        @relation("UserProjects")
  projectMembers  ProjectMember[]
  projectRequests ProjectRequest[] 
}

model Project {
  id          String            @id @default(uuid())
  title       String
  description String
  city        String?   
  teamSize    Int               @default(3)
  ownerId     String
  createdAt   DateTime          @default(now())
  
  // Relations
  owner         User            @relation("UserProjects", fields: [ownerId], references: [id])
  members       ProjectMember[]
  technologies  ProjectTech[]     // Many-to-many with Technology
  categories    ProjectCategory[] // Many-to-many with Category  
  industries    ProjectIndustry[] // Many-to-many with Industry
  requests      ProjectRequest[]  // Join requests for this project
}

model Technology {
  id       String        @id @default(uuid())
  name     String        @unique 
  slug     String        @unique 
  color    String?       // For badge colors
  projects ProjectTech[]
}

model Category {
  id       String           @id @default(uuid()) 
  name     String           @unique 
  slug     String           @unique 
  projects ProjectCategory[]
}

model Industry {
  id       String           @id @default(uuid())
  name     String           @unique 
  slug     String           @unique 
  projects ProjectIndustry[]
}

model ProjectRequest {
  id        String        @id @default(uuid())
  projectId String
  userId    String
  status    RequestStatus @default(PENDING)
  message   String?       
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  
  // Relations
  project   Project       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, userId]) // to prevent duplicate requests
}

// Junction tables for many-to-many relationships
model ProjectTech {
  id           String     @id @default(uuid())
  projectId    String
  technologyId String
  
  project      Project    @relation(fields: [projectId], references: [id], onDelete: Cascade)
  technology   Technology @relation(fields: [technologyId], references: [id])
  
  @@unique([projectId, technologyId])
}

model ProjectCategory {
  id         String   @id @default(uuid())
  projectId  String
  categoryId String
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id])
  
  @@unique([projectId, categoryId])
}

model ProjectIndustry {
  id         String   @id @default(uuid())
  projectId  String
  industryId String
  
  project    Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  industry   Industry @relation(fields: [industryId], references: [id])
  
  @@unique([projectId, industryId])
}

model ProjectMember {
  id        String       @id @default(uuid())
  userId    String
  projectId String
  status    MemberStatus @default(ACTIVE)
  joinedAt  DateTime     @default(now())
  
  user      User         @relation(fields: [userId], references: [id])
  project   Project      @relation(fields: [projectId], references: [id])
  
  @@unique([userId, projectId])
}

enum MemberStatus {
  ACTIVE
  LEFT
  REMOVED
}

enum RequestStatus {
  PENDING
  APPROVED
  REJECTED
  WITHDRAWN
}
